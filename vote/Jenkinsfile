pipeline {
	agent none
//	agent{
//		docker{
//			image 'python:2.7.16-slim'
//			args '--user root'
//		}
//	}


	stages{
		stage(build){
			agent{
				docker{
					image 'python:2.7.16-slim'
					args '--user root'
				}
			}
			when{
				changeset "**/vote/**"
			}

			steps{
				echo 'Compiling vote app'
				dir('vote'){
					sh 'pip install -r requirements.txt'
				}
			}

		}
		stage(test){
			agent{
				docker{
					image 'python:2.7.16-slim'
					args '--user root'
				}
			}
			when{
				changeset "**/vote/**"
			}

			steps{
				echo 'Running Unit Tests on vote app'
				dir('vote') {
					sh 'pip install -r requirements.txt'
					sh 'nosetests -v'
				}
			}
		}
		stage('docker-package'){
			agent any
			when{
//				branch 'main'
				changeset "**/vote/**"
			}
			steps{
				echo 'Packaging vote app with docker'
				script{
					docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
						def voteImage = docker.build("chuckchastain/worker:v${env.BUILD_ID}", "./vote")
						voteImage.push()
//						voteImage.push("${env.BRANCH_NAME}")
						voteImage.push("latest")
					}
				}
			}
		}
	}

	post{
		always{
			echo 'Building multibranch pipeline for vote is completed..'
		}
		
		failure {
			slackSend (channel: "chuck-dev", message: "Build Failed - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
		}
		success {
			slackSend (channel: "chuck-dev", message: "Build Succeeded - ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
		}
	}
}

		stage('docker-package'){
			agent any
			when{
				branch 'main'
				changeset "**/worker/**"
			}
			steps{
				echo 'Packaging worker app with docker'
				script{
					docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
						def workerImage = docker.build("chuckchastain/worker:v${env.BUILD_ID}", "./worker")
						workerImage.push()
						workerImage.push("${env.BRANCH_NAME}")
//						workerImage.push("latest")
					}
				}
			}
		}
